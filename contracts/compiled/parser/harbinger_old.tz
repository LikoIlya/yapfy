{ parameter
    (or (or (or (set %getPrice nat) (pair %receivePrice string (pair timestamp nat)))
            (or (nat %setTimestampLimit) (pair %updateAsset (string %assetName) (nat %tokenId))))
        (pair %updateOracle (address %oracle) (nat %oraclePrecision) (nat %timestampLimit))) ;
  storage
    (pair (address %router)
          (address %oracle)
          (nat %oraclePrecision)
          (int %timestampLimit)
          (big_map %assetName nat string)
          (big_map %assetId string nat)
          (big_map %metadata string bytes)
          (option %tmp bytes)) ;
  code { PUSH string "P_NOT_ROUTER" ;
         PUSH string "P_OLD_PRICE_RECEIVED" ;
         PUSH string "P_CANT_UNPACK_TMP_BYTES" ;
         PUSH string "P_INVALID_STATE" ;
         PUSH nat 1000000000000000000000000000000000000 ;
         NIL operation ;
         LAMBDA
           (pair bool string)
           unit
           { UNPAIR ; IF { DROP ; UNIT } { FAILWITH } } ;
         LAMBDA
           (pair (option (contract (pair string (contract (pair string (pair timestamp nat)))))) string)
           (contract (pair string (contract (pair string (pair timestamp nat)))))
           { UNPAIR ; IF_NONE { FAILWITH } { SWAP ; DROP } } ;
         LAMBDA
           (pair (option (pair nat nat nat (or (or unit nat) unit))) string)
           (pair nat nat nat (or (or unit nat) unit))
           { UNPAIR ; IF_NONE { FAILWITH } { SWAP ; DROP } } ;
         PUSH string "XTZ-USD" ;
         DIG 10 ;
         UNPAIR ;
         PUSH string "DONT_SEND_TEZOS" ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         EQ ;
         PAIR ;
         DUP 7 ;
         SWAP ;
         EXEC ;
         DROP ;
         IF_LEFT
           { IF_LEFT
               { DIG 6 ;
                 DROP ;
                 IF_LEFT
                   { DIG 6 ;
                     DIG 9 ;
                     DIG 10 ;
                     DROP 3 ;
                     DIG 7 ;
                     UNIT ;
                     LEFT nat ;
                     LEFT unit ;
                     PUSH nat 0 ;
                     PUSH nat 0 ;
                     PUSH nat 0 ;
                     PAIR 4 ;
                     PACK ;
                     DUP 4 ;
                     GET 14 ;
                     IF_NONE {} { SWAP ; DROP } ;
                     UNPACK
                       (pair (nat %price)
                             (nat %level)
                             (nat %size)
                             (or %state (or (unit %idle) (nat %waitingAssetPrice)) (unit %waitingUsdPrice))) ;
                     PAIR ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DUP ;
                     GET 6 ;
                     IF_LEFT
                       { IF_LEFT { DIG 7 ; DROP 2 } { DROP ; DIG 6 ; FAILWITH } }
                       { DROP ; DIG 6 ; FAILWITH } ;
                     PUSH string "P_EMPTY_SET" ;
                     PUSH nat 0 ;
                     DUP 4 ;
                     SIZE ;
                     COMPARE ;
                     GT ;
                     PAIR ;
                     DIG 6 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     SELF %receivePrice ;
                     NIL operation ;
                     PUSH string "P_NOT_ORACLE_CONTRACT" ;
                     DUP 6 ;
                     GET 3 ;
                     CONTRACT %get (pair string (contract (pair string (pair timestamp nat)))) ;
                     PAIR ;
                     DUP 8 ;
                     SWAP ;
                     EXEC ;
                     PUSH mutez 0 ;
                     DUP 4 ;
                     DUP 9 ;
                     PAIR ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     DIG 3 ;
                     ITER { SWAP ;
                            DUP 5 ;
                            GET 9 ;
                            DIG 2 ;
                            PUSH string "STRING_NOT_DEFINED" ;
                            DUG 2 ;
                            GET ;
                            IF_NONE { FAILWITH } { SWAP ; DROP } ;
                            PUSH string "P_NOT_ORACLE_CONTRACT" ;
                            DUP 6 ;
                            GET 3 ;
                            CONTRACT %get (pair string (contract (pair string (pair timestamp nat)))) ;
                            PAIR ;
                            DUP 8 ;
                            SWAP ;
                            EXEC ;
                            PUSH mutez 0 ;
                            DUP 5 ;
                            DUP 4 ;
                            PAIR ;
                            TRANSFER_TOKENS ;
                            DUP 7 ;
                            DIG 2 ;
                            COMPARE ;
                            EQ ;
                            IF { DROP } { CONS } } ;
                     SWAP ;
                     DIG 4 ;
                     DIG 5 ;
                     DROP 3 ;
                     SWAP ;
                     UNIT ;
                     RIGHT (or unit nat) ;
                     UPDATE 6 ;
                     PUSH nat 1 ;
                     DUP 3 ;
                     SIZE ;
                     SUB ;
                     ABS ;
                     UPDATE 5 ;
                     DIG 2 ;
                     SWAP ;
                     SOME ;
                     IF_NONE { NONE bytes } { PACK ; SOME } ;
                     UPDATE 14 ;
                     SWAP ;
                     PAIR }
                   { DIG 4 ;
                     DROP ;
                     PUSH string "P_NOT_ORACLE" ;
                     DUP 3 ;
                     GET 3 ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     PAIR ;
                     DUP 6 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 7 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     DUP 11 ;
                     DIG 2 ;
                     NOW ;
                     SUB ;
                     DIG 2 ;
                     COMPARE ;
                     GE ;
                     PAIR ;
                     DUP 6 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     CDR ;
                     DIG 3 ;
                     DUP 3 ;
                     COMPARE ;
                     EQ ;
                     IF { DIG 4 ;
                          DIG 8 ;
                          DROP 2 ;
                          DIG 6 ;
                          PUSH string "P_NO_TMP" ;
                          DUP 5 ;
                          GET 14 ;
                          IF_NONE { FAILWITH } { SWAP ; DROP } ;
                          UNPACK
                            (pair (nat %price)
                                  (nat %level)
                                  (nat %size)
                                  (or %state (or (unit %idle) (nat %waitingAssetPrice)) (unit %waitingUsdPrice))) ;
                          PAIR ;
                          DIG 4 ;
                          SWAP ;
                          EXEC ;
                          DUP ;
                          GET 6 ;
                          IF_LEFT
                            { IF_LEFT { DROP ; DIG 5 ; FAILWITH } { DROP ; DIG 5 ; FAILWITH } }
                            { DIG 6 ; DROP 2 } ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          DIG 5 ;
                          DUP 6 ;
                          GET 5 ;
                          MUL ;
                          EDIV ;
                          IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                          CAR ;
                          SWAP ;
                          DIG 2 ;
                          UPDATE 1 ;
                          LEVEL ;
                          UPDATE 3 ;
                          DIG 3 ;
                          SWAP ;
                          PUSH nat 0 ;
                          RIGHT unit ;
                          LEFT unit ;
                          UPDATE 6 ;
                          SOME ;
                          IF_NONE { NONE bytes } { PACK ; SOME } ;
                          UPDATE 14 ;
                          SWAP ;
                          PAIR }
                        { DIG 7 ;
                          PUSH string "P_NO_TMP" ;
                          DUP 5 ;
                          GET 14 ;
                          IF_NONE { FAILWITH } { SWAP ; DROP } ;
                          UNPACK
                            (pair (nat %price)
                                  (nat %level)
                                  (nat %size)
                                  (or %state (or (unit %idle) (nat %waitingAssetPrice)) (unit %waitingUsdPrice))) ;
                          PAIR ;
                          DIG 4 ;
                          SWAP ;
                          EXEC ;
                          DUP ;
                          GET 6 ;
                          IF_LEFT
                            { IF_LEFT { DROP ; DIG 6 ; FAILWITH } { DIG 7 ; DROP } }
                            { DROP ; DIG 6 ; FAILWITH } ;
                          DIG 7 ;
                          LEVEL ;
                          DUP 4 ;
                          GET 3 ;
                          COMPARE ;
                          EQ ;
                          PAIR ;
                          DIG 6 ;
                          SWAP ;
                          EXEC ;
                          DROP ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          DIG 6 ;
                          DIG 4 ;
                          MUL ;
                          EDIV ;
                          IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                          CAR ;
                          DUP 3 ;
                          GET 5 ;
                          DUP 3 ;
                          COMPARE ;
                          EQ ;
                          IF { SWAP ;
                               DROP ;
                               SWAP ;
                               UNIT ;
                               LEFT nat ;
                               LEFT unit ;
                               UPDATE 6 ;
                               PUSH nat 0 ;
                               UPDATE 5 }
                             { DIG 2 ; PUSH nat 1 ; DIG 3 ; ADD ; RIGHT unit ; LEFT unit ; UPDATE 6 } ;
                          DIG 3 ;
                          SWAP ;
                          SOME ;
                          IF_NONE { NONE bytes } { PACK ; SOME } ;
                          UPDATE 14 ;
                          SWAP ;
                          PAIR } ;
                     DUP ;
                     CDR ;
                     DUP ;
                     GET 11 ;
                     DIG 3 ;
                     PUSH string "TOKEN_ID_NOT_DEFINED" ;
                     DUG 2 ;
                     GET ;
                     IF_NONE { FAILWITH } { SWAP ; DROP } ;
                     NIL operation ;
                     DIG 4 ;
                     DUP 4 ;
                     CAR ;
                     CONTRACT %receivePrice (pair (nat %tokenId) (nat %priceF)) ;
                     IF_NONE { FAILWITH } { SWAP ; DROP } ;
                     PUSH mutez 0 ;
                     DIG 5 ;
                     CAR ;
                     DIG 4 ;
                     PAIR ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     PAIR } }
               { DIG 2 ;
                 DIG 3 ;
                 DIG 4 ;
                 DIG 7 ;
                 DIG 8 ;
                 DIG 9 ;
                 DIG 10 ;
                 DROP 7 ;
                 IF_LEFT
                   { DIG 4 ;
                     DUP 3 ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     INT ;
                     UPDATE 7 ;
                     SWAP ;
                     PAIR }
                   { DIG 4 ;
                     DUP 3 ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     GET 9 ;
                     DUP 3 ;
                     CAR ;
                     DUP 4 ;
                     CDR ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 9 ;
                     DUP ;
                     GET 11 ;
                     DUP 3 ;
                     CDR ;
                     DIG 3 ;
                     CAR ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 11 ;
                     SWAP ;
                     PAIR } } }
           { DIG 2 ;
             DIG 3 ;
             DIG 4 ;
             DIG 7 ;
             DIG 8 ;
             DIG 9 ;
             DIG 10 ;
             DROP 7 ;
             DIG 4 ;
             DUP 3 ;
             CAR ;
             SENDER ;
             COMPARE ;
             EQ ;
             PAIR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             DROP ;
             DUP ;
             DUG 2 ;
             CAR ;
             UPDATE 3 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 3 ;
             UPDATE 5 ;
             SWAP ;
             GET 4 ;
             INT ;
             UPDATE 7 ;
             SWAP ;
             PAIR } } }

